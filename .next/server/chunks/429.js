"use strict";exports.id=429,exports.ids=[429],exports.modules={8347:(e,t,a)=>{var s;a.d(t,{AB:()=>LitigationTaskManager,D1:()=>s}),function(e){e.TASK_COMPLETION="task_completion",e.TIME_BASED="time_based"}(s||(s={}));let Task=class Task{constructor(e,t,a=[]){this.taskId=e,this.name=t,this.dependencies=a,this.completed=!1,this.createdDate=new Date}markComplete(){this.completed=!0,this.completionDate=new Date}addDependency(e){this.dependencies.push(e)}checkDependenciesMet(e){for(let t of this.dependencies)if("task_completion"===t.dependencyType){let a=e[t.targetTaskId];if(!a||!a.completed)return!1}else if("time_based"===t.dependencyType){let a=e[t.targetTaskId];if(!a||!a.completed||!a.completionDate)return!1;let s=new Date(a.completionDate);if(s.setDate(s.getDate()+7*(t.timeDelayWeeks||0)),new Date<s)return!1}return!0}toData(){return{taskId:this.taskId,name:this.name,dependencies:this.dependencies,completed:this.completed,completionDate:this.completionDate?.toISOString(),createdDate:this.createdDate.toISOString()}}static fromData(e){let t=new Task(e.taskId,e.name,e.dependencies);return t.completed=e.completed,t.completionDate=e.completionDate?new Date(e.completionDate):void 0,t.createdDate=new Date(e.createdDate),t}};let Matter=class Matter{constructor(e,t,a){this.matterId=e,this.clientId=t,this.clientName=a,this.tasks={},this.createdDate=new Date,this.createDefaultTasks()}createDefaultTasks(){let e=new Task("intake_call","Intake Call"),t=new Task("sign_engagement","Sign Engagement Letter");t.addDependency({dependencyType:"task_completion",targetTaskId:"intake_call"});let a=new Task("collect_medical_records","Collect Medical Records");a.addDependency({dependencyType:"task_completion",targetTaskId:"sign_engagement"});let s=new Task("client_checkin","Client Check In");s.addDependency({dependencyType:"task_completion",targetTaskId:"sign_engagement"}),s.addDependency({dependencyType:"time_based",targetTaskId:"intake_call",timeDelayWeeks:2});let r=new Task("create_demand","Create Demand");for(let n of(r.addDependency({dependencyType:"task_completion",targetTaskId:"collect_medical_records"}),r.addDependency({dependencyType:"task_completion",targetTaskId:"client_checkin"}),[e,t,a,s,r]))this.tasks[n.taskId]=n}addTask(e,t,a=[]){if(this.tasks[e])throw Error(`Task with ID '${e}' already exists`);let s=new Task(e,t,a);return this.tasks[e]=s,s}getTask(e){return this.tasks[e]}executeTask(e){let t=this.tasks[e];return t?t.completed?`Task ${t.name} already completed`:t.checkDependenciesMet(this.tasks)?(t.markComplete(),`Task ${t.name} complete`):`Task ${t.name} not ready`:`Task ${e} not found`}addDependencyToTask(e,t){let a=this.tasks[e];if(!a)throw Error(`Task with ID '${e}' not found`);a.addDependency(t)}getTaskStatus(){let e={};for(let[t,a]of Object.entries(this.tasks)){let s=a.checkDependenciesMet(this.tasks);e[t]={name:a.name,completed:a.completed,completionDate:a.completionDate?.toISOString(),dependenciesMet:s,canExecute:!a.completed&&s}}return e}toData(){let e={};for(let[t,a]of Object.entries(this.tasks))e[t]=a.toData();return{matterId:this.matterId,clientId:this.clientId,clientName:this.clientName,tasks:e,createdDate:this.createdDate.toISOString()}}static fromData(e){let t=new Matter(e.matterId,e.clientId,e.clientName);for(let[a,s]of(t.createdDate=new Date(e.createdDate),t.tasks={},Object.entries(e.tasks)))t.tasks[a]=Task.fromData(s);return t}};let LitigationTaskManager=class LitigationTaskManager{constructor(){this.matters={}}createMatter(e,t,a){if(this.matters[e])throw Error(`Matter with ID '${e}' already exists`);let s=new Matter(e,t,a);return this.matters[e]=s,s}getMatter(e){return this.matters[e]}triggerTask(e,t){let a=this.matters[e];return a?a.executeTask(t):`Matter ${e} not found`}createTask(e,t,a,s=[]){let r=this.matters[e];if(!r)return`Matter ${e} not found`;try{return r.addTask(t,a,s),`Task ${a} created successfully`}catch(e){return e instanceof Error?e.message:"Unknown error"}}addDependency(e,t,a){let s=this.matters[e];if(!s)return`Matter ${e} not found`;try{return s.addDependencyToTask(t,a),`Dependency added to task ${t}`}catch(e){return e instanceof Error?e.message:"Unknown error"}}getMatterStatus(e){let t=this.matters[e];return t?{matterId:t.matterId,clientId:t.clientId,clientName:t.clientName,createdDate:t.createdDate.toISOString(),tasks:t.getTaskStatus()}:null}listMatters(){return Object.values(this.matters).map(e=>({matterId:e.matterId,clientId:e.clientId,clientName:e.clientName,createdDate:e.createdDate.toISOString(),totalTasks:Object.keys(e.tasks).length,completedTasks:Object.values(e.tasks).filter(e=>e.completed).length}))}exportData(){let e={};for(let[t,a]of Object.entries(this.matters))e[t]=a.toData();return e}importData(e){for(let[t,a]of(this.matters={},Object.entries(e)))this.matters[t]=Matter.fromData(a)}}},2429:(e,t,a)=>{a.d(t,{En:()=>saveManager,UE:()=>getManager});var s=a(8347),r=a(7770);let SupabaseStorage=class SupabaseStorage{async saveMatter(e){console.log(`Saving matter ${e.matterId} with ${Object.keys(e.tasks).length} tasks`),console.log("Tasks to save:",Object.keys(e.tasks));let{data:t}=await r.O.from("matters").select("matter_id").eq("matter_id",e.matterId).single();if(t)console.log(`Matter ${e.matterId} already exists in database`);else{let{error:t}=await r.O.from("matters").insert({matter_id:e.matterId,client_id:e.clientId,created_date:e.createdDate});if(t)throw Error(`Failed to save matter: ${t.message}`);console.log(`Matter ${e.matterId} saved to database`)}for(let[t,a]of Object.entries(e.tasks)){console.log(`Saving task: ${t} (${a.name})`);try{await this.saveTaskWithoutDependencies(e.matterId,a),console.log(`Task ${t} saved successfully`)}catch(e){throw console.error(`Failed to save task ${t}:`,e),e}}for(let[t,a]of Object.entries(e.tasks))if(a.dependencies.length>0){console.log(`Saving dependencies for task: ${t}`);try{await this.saveDependencies(e.matterId,a),console.log(`Dependencies for ${t} saved successfully`)}catch(e){throw console.error(`Failed to save dependencies for ${t}:`,e),e}}console.log(`All tasks and dependencies saved for matter ${e.matterId}`)}async saveTaskWithoutDependencies(e,t){let{error:a}=await r.O.from("tasks").upsert({matter_id:e,task_id:t.taskId,name:t.name,completed:t.completed,completion_date:t.completionDate,created_date:t.createdDate},{onConflict:"matter_id,task_id",ignoreDuplicates:!1});if(a)throw Error(`Failed to save task: ${a.message}`)}async saveDependencies(e,t){if(await r.O.from("task_dependencies").delete().eq("matter_id",e).eq("task_id",t.taskId),t.dependencies.length>0){let a=t.dependencies.map(a=>({matter_id:e,task_id:t.taskId,dependency_type:a.dependencyType,target_task_id:a.targetTaskId,time_delay_weeks:a.timeDelayWeeks||null})),{error:s}=await r.O.from("task_dependencies").insert(a);if(s)throw Error(`Failed to save dependencies: ${s.message}`)}}async saveTask(e,t){await this.saveTaskWithoutDependencies(e,t),await this.saveDependencies(e,t)}async loadMatter(e){let{data:t,error:a}=await r.O.from("matters").select("*").eq("matter_id",e).single();if(a||!t)return null;let{data:s,error:n}=await r.O.from("tasks").select("*").eq("matter_id",e);if(n)throw Error(`Failed to load tasks: ${n.message}`);let{data:i,error:d}=await r.O.from("task_dependencies").select("*").eq("matter_id",e);if(d)throw Error(`Failed to load dependencies: ${d.message}`);let o={};for(let e of s||[]){let t=(i||[]).filter(t=>t.task_id===e.task_id).map(e=>({dependencyType:e.dependency_type,targetTaskId:e.target_task_id,timeDelayWeeks:e.time_delay_weeks||void 0}));o[e.task_id]={taskId:e.task_id,name:e.name,dependencies:t,completed:e.completed,completionDate:e.completion_date,createdDate:e.created_date}}return{matterId:t.matter_id,clientId:t.client_id,clientName:t.client_name||t.client_id,tasks:o,createdDate:t.created_date}}async loadAllMatters(){let{data:e,error:t}=await r.O.from("matters").select("matter_id");if(t)throw Error(`Failed to load matters: ${t.message}`);let a={};for(let t of e||[]){let e=await this.loadMatter(t.matter_id);e&&(a[t.matter_id]=e)}return a}async deleteMatter(e){let{error:t}=await r.O.from("matters").delete().eq("matter_id",e);if(t)throw Error(`Failed to delete matter: ${t.message}`)}async exists(e){let{data:t,error:a}=await r.O.from("matters").select("matter_id").eq("matter_id",e).single();return!a&&!!t}async getClient(e){let{data:t,error:a}=await r.O.from("clients").select("*").eq("client_id",e).single();return a||!t?null:t}async getAllClients(){let{data:e,error:t}=await r.O.from("clients").select("*").order("name");if(t)throw Error(`Failed to fetch clients: ${t.message}`);return e||[]}async getMattersForClient(e){let{data:t,error:a}=await r.O.from("matters").select("matter_id").eq("client_id",e);if(a)throw Error(`Failed to load matters for client: ${a.message}`);let s={};for(let e of t||[]){let t=await this.loadMatter(e.matter_id);t&&(s[e.matter_id]=t)}return s}};let n=new SupabaseStorage,i=null;async function getManager(){if(!i){i=new s.AB;try{console.log("Loading data from Supabase...");let e=await n.loadAllMatters();console.log("Loaded matters:",Object.keys(e)),i.importData(e)}catch(e){console.error("Failed to load data from Supabase:",e),console.error("Error details:",e instanceof Error?e.message:e)}}return i}async function saveManager(e){let t=e.exportData();for(let[e,a]of Object.entries(t))await n.saveMatter(a)}},7770:(e,t,a)=>{a.d(t,{O:()=>i});var s=a(8935);let r="your_supabase_project_url",n="your_supabase_anon_key";if(!r||!n)throw Error("Missing Supabase environment variables");let i=(0,s.eI)(r,n);(0,s.eI)(r,process.env.SUPABASE_SERVICE_ROLE_KEY,{auth:{autoRefreshToken:!1,persistSession:!1}})}};